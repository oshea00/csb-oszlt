{"version":3,"sources":["App.js","useInterval.js","index.js"],"names":["App","useState","count","setCount","delay","setDelay","runWorker","setRunWorker","make","model","msg","price","rowData","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","className","style","height","width","FormGroup","row","FormControlLabel","control","Checkbox","checked","onChange","event","target","name","color","label","columnDefs","field","map","m","reduce","a","c","rootElement","document","getElementById","ReactDOM","render"],"mappings":"gPAUe,SAASA,IAAO,IAAD,EACJC,mBAAS,GADL,mBACvBC,EADuB,KAChBC,EADgB,OAEJF,mBAAS,KAFL,mBAEvBG,EAFuB,KAEhBC,EAFgB,OAGMJ,oBAAS,GAHf,mBAGrBK,EAHqB,KAGVC,EAHU,OAIVN,mBAAS,CACzB,CACEO,KAAM,SACNC,MAAO,CAAC,CAAEC,IAAK,aAAe,CAAEA,IAAK,cACrCC,MAAO,MAET,CAAEH,KAAM,OAAQC,MAAO,CAAC,CAAEC,IAAK,OAASC,MAAO,MAC/C,CAAEH,KAAM,UAAWC,MAAO,GAAIE,MAAO,QAPhCC,EAJqB,oBAoC5B,OC5CK,SAAqBC,EAAUT,GACpC,IAAMU,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUJ,IACvB,CAACA,IAGJG,qBAAU,WAIR,GAAc,OAAVZ,EAAgB,CAClB,IAAIc,EAAKC,aAJX,WACEL,EAAcG,YAGab,GAC3B,OAAO,kBAAMgB,cAAcF,OAE5B,CAACd,IDsBJiB,EAAY,WAEVlB,EAASD,EAAQ,KAChBE,GAGD,sBAAKkB,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,KAA9D,UACE,cAACC,EAAA,EAAD,CAAWC,KAAG,EAAd,SACE,cAACC,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEC,QAASzB,EACT0B,SApBS,SAACC,GACpB1B,EAAa0B,EAAMC,OAAOH,SAC1B1B,EAAS4B,EAAMC,OAAOH,QAAU,IAAO,MACvC5B,EAAS8B,EAAMC,OAAOH,QAAU7B,EAAQ,IAkB9BiC,KAAK,YACLC,MAAM,YAGVC,MAAK,uBAAkBnC,OAG3B,cAAC,cAAD,CAEEoC,WAxBU,CAAC,CAAEC,MAAO,QAAU,CAAEA,MAAO,SAAW,CAAEA,MAAO,UAyB3D3B,QAASA,EAAQ4B,KAxCR,SAACC,GACd,OAAO,2BACFA,GACA,CACDhC,MAAOgC,EAAEhC,MAAMiC,QAAO,SAACC,EAAGC,GAAJ,gBAAaD,GAAb,OAAiBC,EAAElC,IAAnB,QAA4B,cEvB1D,IAAMmC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACjD,EAAD,MAEF6C,K","file":"static/js/main.5185dc0f.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React, { useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { useInterval } from \"./useInterval\";\n\nexport default function App() {\n  let [count, setCount] = useState(0);\n  let [delay, setDelay] = useState(1000);\n  const [runWorker, setRunWorker] = useState(false);\n  const [rowData] = useState([\n    {\n      make: \"Toyota\",\n      model: [{ msg: \"message A\" }, { msg: \"Message B\" }],\n      price: 35000\n    },\n    { make: \"Ford\", model: [{ msg: \"OK\" }], price: 32000 },\n    { make: \"Porsche\", model: [], price: 72000 }\n  ]);\n\n  const mapper = (m) => {\n    return {\n      ...m,\n      ...{\n        model: m.model.reduce((a, c) => `${a}${c.msg}, `, \"\")\n      }\n    };\n  };\n\n  const handleChange = (event) => {\n    setRunWorker(event.target.checked);\n    setDelay(event.target.checked ? 1000 : null);\n    setCount(event.target.checked ? count : 0);\n  };\n\n  const colDefs = [{ field: \"make\" }, { field: \"model\" }, { field: \"price\" }];\n\n  useInterval(() => {\n    // Your custom logic here\n    setCount(count + 1);\n  }, delay);\n\n  return (\n    <div className=\"ag-theme-alpine\" style={{ height: 400, width: 600 }}>\n      <FormGroup row>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={runWorker}\n              onChange={handleChange}\n              name=\"runWorker\"\n              color=\"primary\"\n            />\n          }\n          label={`Check Status ${count}`}\n        />\n      </FormGroup>\n      <AgGridReact\n        //        onGridReady={onGridReady}\n        columnDefs={colDefs}\n        rowData={rowData.map(mapper)}\n      ></AgGridReact>\n    </div>\n  );\n}\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}